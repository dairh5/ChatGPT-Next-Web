import type { NextApiRequest, NextApiResponse } from 'next';

// 配置 OpenXLab API 的 URL 和 API Key
const OPENXLAB_API_URL = 'https://api.openxlab.com/v1/chat/completions'; // 替换为 OpenXLab 的实际 API URL
const OPENXLAB_API_KEY = process.env.OPENXLAB_API_KEY; // 从环境变量中加载 API Key

// 定义请求体类型
interface OpenXLabRequest {
  model: string;
  messages: Array<{ role: 'user' | 'assistant' | 'system'; content: string }>;
  temperature?: number;
  max_tokens?: number;
}

// 定义响应体类型
interface OpenXLabResponse {
  choices: Array<{ message: { role: string; content: string } }>;
}

// API 处理函数
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  const body: OpenXLabRequest = req.body;

  // 检查是否存在必需的 API Key
  if (!OPENXLAB_API_KEY) {
    res.status(500).json({ error: 'OpenXLab API Key is missing' });
    return;
  }

  try {
    // 向 OpenXLab API 发起请求
    const response = await fetch(OPENXLAB_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENXLAB_API_KEY}`, // 使用 Bearer Token 认证
      },
      body: JSON.stringify(body),
    });

    // 检查 OpenXLab API 的响应状态
    if (!response.ok) {
      const error = await response.json();
      res.status(response.status).json({ error });
      return;
    }

    // 解析 OpenXLab API 的响应
    const data: OpenXLabResponse = await response.json();

    // 将响应数据返回给前端
    res.status(200).json(data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch data from OpenXLab API', details: error });
  }
}
